
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery_builds/get_started/package_overview.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_builds_get_started_package_overview.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_builds_get_started_package_overview.py:

Overview
============
`(1 minute read)`


``spikewrap`` provides a Python interface for managing and
sharing standardized extracellular electrophysiology pipelines.

Built on `SpikeInterface <https://github.com/SpikeInterface/spikeinterface>`_,
``spikewrap`` places emphasis on delivering standardised outputs and
materials for convenient data quality checks.

.. attention::

   ``spikewrap`` is currently in a consultation stage, where feedback on the
   workflow is being actively solicited. New features—such as sorting,
   subject-level analysis, quality checks, support for more probes,
   and additional preprocessing steps—are planned for implementation soon.

   Please :ref:`get in contact <community>` with feedback and suggestions!

Running ``spikewrap``
---------------------

``spikewrap`` expects a project to be organised either in
`NeuroBlueprint <https://neuroblueprint.neuroinformatics.dev/latest/index.html>`_
format (which is :ref:`recommended <neuroblueprint-recommended>`), for example:

.. tab-set::
    :sync-group: category

    .. tab-item:: SpikeGLX

        .. code-block::

            └── rawdata/
                └── sub-001_.../
                    └── ses-001_.../
                        └── ephys/
                            ├── run-001_g0_imec0/
                            │   ├── run-001_g0_t0.imec0.ap.bin
                            │   └── run-001_g0_t0.imec0.ap.meta
                            └── run-002_g0_imec0/
                            │   ├── ...
                            └── ...

    .. tab-item:: OpenEphys

        .. code-block::

            └── rawdata/
                └── sub-001_.../
                    └── ses-001_.../
                        └── ephys/
                            └── Recording Node <ID>/
                                └── experiment1/
                                    ├── recording1/
                                    │   └── ...
                                    └── recording2/
                                    │   └── ...
                                    └── ...

or in custom formats with subject, session and recording folder levels as below:

.. dropdown:: Supported Custom Organisation

    .. tab-set::
        :sync-group: category

        .. tab-item:: SpikeGLX

            .. code-block::

                └── root_folder>/
                    └── my_subject_name/
                        └── my_session_name/
                            ├── run-001_g0_imec0/
                            │   ├── run-001_g0_t0.imec0.ap.bin
                            │   └── run-001_g0_t0.imec0.ap.meta
                            └── run-002_g0_imec0/
                            │   ├── ...
                            └── ...

        .. tab-item:: OpenEphys

            In the OpenEphys case, the input data would look like:

            .. code-block::

                └── root_folder/
                    └── my_subject_name/
                        └── my_session_name/
                            └── Recording Node <ID>/
                                └── experiment1/
                                    ├── recording1/
                                    │   └── ...
                                    └── recording2/
                                    │   └── ...
                                    └── ...

`SpikeGlx <https://billkarsh.github.io/SpikeGLX/>`_ or `OpenEphys <https://open-ephys.org/>`_
systems with `Neuropixels <https://www.neuropixels.org/>`_ probes are currently supported
(see :ref:`Supported Formats <supported-formats>` for details).

We can preprocess, visualise and save a recording session with a few function calls:

.. GENERATED FROM PYTHON SOURCE LINES 108-145

.. code-block:: Python


    import spikewrap as sw

    subject_path = sw.get_example_data_path() / "rawdata" / "sub-001"

    session = sw.Session(
        subject_path=subject_path,
        session_name="ses-001",
        run_names="all",
        file_format="spikeglx"  # or "openephys"
    )

    # Run (lazy) preprocessing, for fast plotting
    # and prototyping of preprocessing steps

    session.preprocess(
        configs="neuropixels+kilosort2_5",
        per_shank=True,
        concat_runs=False,
    )

    plots = session.plot_preprocessed(
        run_idx=0,
        time_range=(0, 0.5),
        show_channel_ids=False,
        show=True
    )

    # Write preprocessed data to disk, optionally
    # in a SLURM job (if on a HPC)

    session.save_preprocessed(
        overwrite=True,
        n_jobs=12,
        slurm=False
    )




.. image-sg:: /gallery_builds/get_started/images/sphx_glr_package_overview_001.png
   :alt: Session: ses-001, Run: run-001_g0_imec0 Shank: 1, Session: ses-001, Run: run-001_g0_imec0 Shank: 2
   :srcset: /gallery_builds/get_started/images/sphx_glr_package_overview_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none



    The preprocessing options are: {
        "1": [
            "bandpass_filter",
            {
                "freq_max": 6000,
                "freq_min": 300
            }
        ],
        "2": [
            "common_reference",
            {
                "operator": "median",
                "reference": "global"
            }
        ]
    }

    Loading data from path: /home/runner/work/spikewrap/spikewrap/spikewrap/examples/example_tiny_data/spikeglx/rawdata/sub-001/ses-001/ephys/run-001_g0_imec0

    Loading data from path: /home/runner/work/spikewrap/spikewrap/spikewrap/examples/example_tiny_data/spikeglx/rawdata/sub-001/ses-001/ephys/run-002_g0_imec0

    Split run: run-001_g0_imec0 by shank. There are 2 shanks. 

    Split run: run-002_g0_imec0 by shank. There are 2 shanks. 

    Saving data for: run-001_g0_imec0...

    `overwrite=True`, so deleting all files and folders (except for slurm_logs) at the path:
    /home/runner/work/spikewrap/spikewrap/spikewrap/examples/example_tiny_data/spikeglx/derivatives/sub-001/ses-001/ephys/run-001_g0_imec0

    Saving sync channel for: run-001_g0_imec0...
    write_binary_recording 
    n_jobs=4 - samples_per_chunk=60,000 - chunk_memory=21.97 MiB - total_memory=87.89 MiB - chunk_duration=2.00s
    write_binary_recording:   0%|          | 0/1 [00:00<?, ?it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  4.83it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  4.83it/s]
    write_binary_recording 
    n_jobs=4 - samples_per_chunk=60,000 - chunk_memory=21.97 MiB - total_memory=87.89 MiB - chunk_duration=2.00s
    write_binary_recording:   0%|          | 0/1 [00:00<?, ?it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  4.57it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  4.57it/s]

    Saving data for: run-002_g0_imec0...

    `overwrite=True`, so deleting all files and folders (except for slurm_logs) at the path:
    /home/runner/work/spikewrap/spikewrap/spikewrap/examples/example_tiny_data/spikeglx/derivatives/sub-001/ses-001/ephys/run-002_g0_imec0

    Saving sync channel for: run-002_g0_imec0...
    write_binary_recording 
    n_jobs=4 - samples_per_chunk=60,000 - chunk_memory=21.97 MiB - total_memory=87.89 MiB - chunk_duration=2.00s
    write_binary_recording:   0%|          | 0/1 [00:00<?, ?it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  3.87it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  3.87it/s]
    write_binary_recording 
    n_jobs=4 - samples_per_chunk=60,000 - chunk_memory=21.97 MiB - total_memory=87.89 MiB - chunk_duration=2.00s
    write_binary_recording:   0%|          | 0/1 [00:00<?, ?it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  3.92it/s]    write_binary_recording: 100%|██████████| 1/1 [00:00<00:00,  3.91it/s]




.. GENERATED FROM PYTHON SOURCE LINES 146-171

with data output to the standardised
`NeuroBlueprint <https://neuroblueprint.neuroinformatics.dev/latest/index.html>`_
structure:

.. code-block::

   └── root_folder/
       └── derivatives/
           └── sub-001/
               └── ses-001  /
                   └── ephys/
                       └── run-001_g0_imec0/
                       │   ├── preprocessed/
                       │   │   ├── shank_0/
                       │   │   │   └── si_recording/
                       │   │   │       └── <spikeinterface binary>
                       │   │   └── shank_1/
                       │   │       └── si_recording/
                       │   │           └── <spikeinterface binary>
                       │   └── sync/
                       │       └── sync_channel.npy
                       └── run-002_g0_imec0/
                           └── ...

Next, visit :ref:`get-started` and :ref:`tutorials_index` to try out ``spikewrap``.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.955 seconds)


.. _sphx_glr_download_gallery_builds_get_started_package_overview.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/neuroinformatics-unit/spikewrap/gh-pages?filepath=notebooks/gallery_builds/get_started/package_overview.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: package_overview.ipynb <package_overview.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: package_overview.py <package_overview.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: package_overview.zip <package_overview.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
